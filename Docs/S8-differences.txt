S8 differences
--------------

This document is meant to describe all the differences of the different
Sega 8-bit consoles (From the SG-1000 to the MegaDrive with a PBC).

Chips:
-------------------------------------------------------------------------------
SG-1000 M2:
TMM2009P-B (8255PPI?)

CPU:
-------------------------------------------------------------------------------
SMS1, SMS2 & MD.
The Z80 in the SMS has some registers initialized to 0xFF, supposedly NMOS.
The opcode "OUT (c),0" (0xED71) outputs 0x00 to the IO port pointed to by the c reg.

Mark III.
NEC
ï¿½PD780-1

SMS.
Zilog
Z0840004PSC
Z80 CPU
8829 SL0965
(Tested by me)
Register startup values.
SP:  $
IR:  $
AF:  $
BC:  $
DE:  $
HL:  $
IX:  $FFFF - $FFFF - $FFFF
IY:  $FFFF - $FFFF - $FFFF
AF': $FFFF - $FFFF - $FFFF
BC': $
DE': $
HL': $

SMS2.
Zilog
Z0840004PSC
SL0965
Z80 CPU
9228	2A
(Tested by jpx072)
Register startup values.
SP:  $FFFF - $FFFF - $FFFF
IR:  $0019 - $0019 - $0019
AF:  $FFFF - $FFFF - $FFFF
BC:  $BDBF - $BDBF - $BDBD
DE:  $FFFF - $FFED - $FFFF
HL:  $FFFF - $FFFF - $FFFF
IX:  $BDFF - $BDBF - $BDFF
IY:  $FFBD - $FFBD - $FFBD
AF': $FFFF - $FFFF - $FFBF
BC': $BFBD - $BFBD - $BDBF
DE': $FFFF - $FFEF - $FFFF
HL': $FFFF - $BFBF - $FFFD
Actual R value would be 2 (0 before ld a,r).

MD.
Zilog
Z0840004PSC
SL0965
Z80 CPU
9210	7Z
(Tested by me on my MD1 PAL-G with PBC)
Register startup values.
SP:  $DFFF - $DFFF - $DFFF
IR:  $001D - $001D - $001D
AF:  $FFA3 - $FFA3 - $FFA3
BC:  $FFFF - $FFFF - $FFFF
DE:  $FFFF - $FFFF - $FFFF
HL:  $E001 - $E001 - $E001
IX:  $FFFF - $FFFF - $FFFF
IY:  $FFFF - $FFFF - $FFFF
AF': $FFFF - $FFFF - $FFFF
BC': $FFFF - $FFFF - $FFFF
DE': $FFFF - $FFFF - $FFFF
HL': $FFFF - $FDFF - $FFFD
Actual R value is 6 (4 before ld a,r).

GG.
The Z80 in the GG has all (most?) registers initialized to 0x00, supposedly CMOS.
The opcode "OUT (c),0" (0xED71) outputs 0xFF to the IO port pointed to by the c reg.
(Tested by Charles McDonald)
Register startup values.
SP:  $0000 - $0000 - $0000
IR:  $0000 - $0000 - $0000
AF:  $0000 - $0000 - $0000
BC:  $0000 - $0000 - $0000
DE:  $0000 - $0000 - $0000
HL:  $0000 - $0000 - $0000
IX:  $0000 - $0000 - $0000
IY:  $0000 - $0000 - $0000
AF': $0000 - $0000 - $0000
BC': $0000 - $0000 - $0000
DE': $0000 - $0000 - $0000
HL': $0000 - $0000 - $0000


Video:
-------------------------------------------------------------------------------
SG-1000, SC-3000, OMV.
 - Mode0, Mode1, Mode2, Mode3.
 - 4 sprites per scanline.
 - Sprites can be zoomed using bit 0 of register #1
 - Doesn't have linecounter/irq.
 - Both code values of 2 & 3 makes a register write.
 - All accesses after a VDP_CTRL write go to the VRAM as it doesn't have CRAM.
 - Data written to the data port is also copied to the VRAM read buffer.
 - Address lines are swaped with bit 7 of reg1.
   8/16k	4k
   A0		A0
   A1		A1
   A2		A2
   A3		A3
   A4		A4
   A5		A5
   A6		A12
   A7		A6
   A8		A7
   A9		A8
   A10		A9
   A11		A10
   A12		A11
   A13		A13

Mark III, SMS1.
 - Mode0, Mode1, Mode2, Mode3, Mode4.
 - 8 sprites per scanline.
 - Only the first 4 sprites can be fully zoomed using bit 0 of register #1,
   the rest are only zoomed vertically.
 - Bit 0 of register #2 acts as a mask for the tilemap adress.
 - VDP Address is updated on first 8bit write.
 - Sprite collision flag is set on the pixel it happens.

SMS2.
 - Mode0, Mode1, Mode2, Mode3, Mode4, Mode4 V224, Mode4 V240.
 - 8 sprites per scanline.

GG.
 - Mode0, Mode1, Mode2, Mode3, Mode4, Mode4 V224, Mode4 V240.
 - 8 sprites per scanline.
 - The GG has the TMS9918 modes but doesn't switch to a hardcoded palette
   instead uses the normal palette that is usercontrolled.

MD.
 - Mode4, Mode5.
 - 8 sprites per scanline in mode 4.
 - Bit 2 of register #1 enables mode 5 when set and mode 4 when clear.
 - None of the TMS9918 modes are available, nor are the extended resolutions of
   the SMS 2 and GG VDP.
 - When the TMS9918 modes are selected, the display is always blanked and
   is colored black. The M1, M2 and M3 bits have no effect.
 - When the first byte of the command word is written, it is latched and the
   LSB of the address register is not updated until the second byte is written.
 - When the data port is written to, the read buffer is not updated.
   It is only updated when the data port is read.
 - When writing to the data port, data will go to CRAM if bit 1 of the code
   register is set. For the other VDP types the code register must be set to
   $03 to access CRAM.
 - Sprites cannot be zoomed using bit 0 of register #1, this bit does nothing.
 - The tilemap adress mask bit is not available from the SMS1.
 - Sprite collision flag is set in the border?
 - VCount start value is 0x14...
 - HCount start value is 0x47... (0x5f-(0x21*3/4))=0x47, (382 - 99 = 283).
 - HCount latch is 0x00 before any value is latched.


 Mode5 specifics:
 - In mode5 there are 2 flags for vdp writes as it now uses 32bit command words.

 - Reg $0F handles VRAM access autoincrement, when first switching from mode4
   to mode5 it's set to 0 (representing 1 for mode4), if set to 1 and switched
   back mode4 it now increases 2 for every VRAM access.

 - After setting address in mode5 you can not set a new address until you have
   read from or written to the VRAM, new writes set vdp regs?

 - In mode 4 VRAM is filled with 0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x00,0x00 repeated.
 - In mode 5 VRAM is filled with
 0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00 repeated.
 - Address lines are swaped between mode4 & mode5.
   Mode4	Mode5
   A0		A0
   A1		A2
   A2		A3
   A3		A4
   A4		A5
   A5		A6
   A6		A7
   A7		A8
   A8		A9
   A9		A1
   A10		A10
   A11		A11
   A12		A12
   A13		A13
   -		A14
   -		A15


 - Writing to the palette in mode 4, bits 0-2 affect the Red bits of the MD palette
   & bits 3-5 affect the the Green bits of the MD palette, bit 6 & 7 has no effect.
   mode4-$01 -> mode5-$0002
   mode4-$02 -> mode5-$0004
   mode4-$04 -> mode5-$0008
   mode4-$08 -> mode5-$0020
   mode4-$10 -> mode5-$0040
   mode4-$20 -> mode5-$0080

IO Ports:
-------------------------------------------------------------------------------
SG-1000.

SC-3000.

Mark III.
 - IO port $3F (IO control) doesn't exist.

SMS1.
 - IO ports $00-$3F return the last byte of the instruction that read the port.
 - On cold boot WRAM is ????.
 - Disabling RAM makes it return the last byte of the instruction that read the port.

SMS2.
 - IO ports $00-$3F return 0xFF?
 - On cold boot WRAM is (allmost entirely) filled with 256*0xFF, 256*0x00 repeated.
   Also a repeating pattern is at 0xCA00, 0xCE00, 0xDA00, 0xDE00 and is 0x200 long.
   0xEA 0x16 0xB1 0x08 0x9F 0x0C 0x0D 0xFF. Bios writes this?
 - Disabling RAM makes it return 0x7E for all addresses.

GG in SMS mode.
 - The GG can't disable the IO ports?
 - IO ports $07-$3F return 0xFF?
 - On cold boot WRAM is ????.

GG.
 - The GG can't disable the IO ports?
 - IO ports $07-$3F return 0xFF?
 - On cold boot WRAM is ????.

MD.
 - Can not (de)select cart/card/exp/bios/IO, only ram?
 - IO ports $00-$3F return 0xFF?
 - Bit 5 of Port B ($DD) is 0 instead of 1.
 - On cold boot WRAM is (allmost entirely) filled with 32*0x00, 32*0xFF repeated.
   Addresses 0xXXFD isn't 0xFF but some random number, except 0xCFFD which is 0x00.
   Also address 0xDFFC is 0x08 and address 0xDFFF is 0x06.
 - Disabling RAM makes it return 0xFF for all addresses?






How to check which HW we're running on:
-------------------------------------------------------------------------------

SG-1000.
	Try to write to the palette and see if we can read back the same values
	from VRAM.

SG-1000/SC-3000.
	Check RAM size, 1k for SG-1000 and 2k for SC-3000/Othello Multivision.

SMS1/SMS2.
	Read a port in the range $00-$3F.
		Returns the last byte of the instruction which read the port on SMS1.
		Returns $FF on SMS2.

GG.
	Use OUT (C),0 to write to VRAM and see if it writes $00 or $FF.

MD.
	Check bit 5 of IO reg $DD.




-------------------------------------------------------------------------------

static ADDRESS_MAP_START( megatech_bios_map, AS_PROGRAM, 8, mtech_state )
AM_RANGE(0x0000, 0x2fff) AM_ROM // from bios rom (0x0000-0x2fff populated in ROM)
AM_RANGE(0x3000, 0x3fff) AM_READWRITE(banked_ram_r, banked_ram_w) // copies instruction data here at startup, must be banked
AM_RANGE(0x4000, 0x5fff) AM_RAM // plain ram?
AM_RANGE(0x6000, 0x6000) AM_WRITE(mt_z80_bank_w )
AM_RANGE(0x6400, 0x6400) AM_READ_PORT("BIOS_DSW0")
AM_RANGE(0x6401, 0x6401) AM_READ_PORT("BIOS_DSW1")
AM_RANGE(0x6404, 0x6404) AM_READWRITE(cart_select_r, cart_select_w) // cart select & ram bank
AM_RANGE(0x6800, 0x6800) AM_READ_PORT("BIOS_IN0")
AM_RANGE(0x6801, 0x6801) AM_READ_PORT("BIOS_IN1")
AM_RANGE(0x6802, 0x6807) AM_READWRITE(bios_ctrl_r, bios_ctrl_w)
//  AM_RANGE(0x6805, 0x6805) AM_READ_PORT("???")
AM_RANGE(0x7000, 0x77ff) AM_ROM // from bios rom (0x7000-0x77ff populated in ROM)
//AM_RANGE(0x7800, 0x7fff) AM_RAM // ?
AM_RANGE(0x8000, 0x9fff) AM_READWRITE(read_68k_banked_data, write_68k_banked_data) // window into 68k address space, reads instr rom and writes to reset banks on z80 carts?
ADDRESS_MAP_END



static ADDRESS_MAP_START( megatech_bios_portmap, AS_IO, 8, mtech_state )
ADDRESS_MAP_GLOBAL_MASK(0xff)
AM_RANGE(0x3f, 0x3f) AM_WRITE(bios_port_ctrl_w)
AM_RANGE(0x7f, 0x7f) AM_WRITE(bios_port_7f_w)

AM_RANGE(0x40, 0x41) AM_MIRROR(0x3e) AM_READ(vdp1_count_r)
AM_RANGE(0x80, 0x80) AM_MIRROR(0x3e) AM_DEVREADWRITE("vdp1", sega315_5124_device, vram_read, vram_write)
AM_RANGE(0x81, 0x81) AM_MIRROR(0x3e) AM_DEVREADWRITE("vdp1", sega315_5124_device, register_read, register_write)

AM_RANGE(0xdc, 0xdd) AM_READ(bios_joypad_r)  // player inputs
ADDRESS_MAP_END

-------------------------------------------------------------------------------

static ADDRESS_MAP_START( megaplay_bios_map, AS_PROGRAM, 8, mplay_state )
AM_RANGE(0x0000, 0x3fff) AM_ROM
AM_RANGE(0x4000, 0x4fff) AM_RAM
AM_RANGE(0x5000, 0x5fff) AM_RAM
AM_RANGE(0x6000, 0x6000) AM_WRITE(game_w)
AM_RANGE(0x6200, 0x6200) AM_READ_PORT("DSW0")
AM_RANGE(0x6201, 0x6201) AM_READ_PORT("DSW1")
AM_RANGE(0x6203, 0x6203) AM_READWRITE(bios_banksel_r, bios_banksel_w)
AM_RANGE(0x6204, 0x6204) AM_READWRITE(bios_6204_r, bios_width_w)
AM_RANGE(0x6400, 0x6400) AM_READ_PORT("TEST")
AM_RANGE(0x6401, 0x6401) AM_READ_PORT("COIN")
AM_RANGE(0x6402, 0x6402) AM_READWRITE(bios_6402_r, bios_6402_w)
AM_RANGE(0x6403, 0x6403) AM_READWRITE(bios_gamesel_r, bios_gamesel_w)
AM_RANGE(0x6404, 0x6404) AM_READWRITE(bios_6404_r, bios_6404_w)
AM_RANGE(0x6600, 0x6600) AM_READWRITE(bios_6600_r, bios_6600_w)
AM_RANGE(0x6001, 0x67ff) AM_WRITEONLY
AM_RANGE(0x6800, 0x77ff) AM_RAM AM_SHARE("ic3_ram")
AM_RANGE(0x8000, 0xffff) AM_READWRITE(bank_r, bank_w)
ADDRESS_MAP_END



static ADDRESS_MAP_START( megaplay_bios_io_map, AS_IO, 8, mplay_state )
ADDRESS_MAP_GLOBAL_MASK(0xff)
AM_RANGE(0x7f, 0x7f) AM_DEVWRITE("sn2", sn76496_device, write)
AM_RANGE(0x40, 0x41) AM_MIRROR(0x3e) AM_READ(vdp1_count_r)
AM_RANGE(0x80, 0x80) AM_MIRROR(0x3e) AM_DEVREADWRITE("vdp1", sega315_5124_device, vram_read, vram_write)
AM_RANGE(0x81, 0x81) AM_MIRROR(0x3e) AM_DEVREADWRITE("vdp1", sega315_5124_device, register_read, register_write)
ADDRESS_MAP_END

